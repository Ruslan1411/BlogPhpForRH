<?php

namespace app\core; //указываем namespace, по которому будет доступен данный класс

class View {
	// декларируем переменные (свойства) path, route и layout, которые будут доступны публично. 
	public $path;
	public $route;
	public $layout = 'default'; // $layout имеет значение по умолчанию default

	/**
    * Функция __construct с модификатором доступа public, означает что данный метод доступен глобально.
    * Получает в качестве входных параметров: 
    * $route - получаем в качестве входных параметров controller и action (и если id), переданных в объект при инициализации в методе run класса Router ($this->params)
    * кладем полученные входящие параметры в свойства данного класса $this->route
    * в свойства класса $this->path кладем значение полученное из массива $route по ключу controller с конкатенировав его с '/' и значением массива $route по ключу action
     */  
	public function __construct($route) {
		$this->route = $route;
		$this->path = $route['controller'].'/'.$route['action'];
	}
	
	/**
    * Функция render с модификатором доступа public, означает что данный метод доступен глобально.
    * Функция отрисовки страницы.
	* Получает в качестве входных параметров: 
    * $title - получаем в качестве входных параметров наименование странциы, передаваемое из контроллера.
	* $vars - массив параметров, также передаваемый из контроллера, по умолчанию пустой массив
    * при помощи функции extract извлекаем переменные и их значение из массива $vars, если там такие есть, при этом имя переменной будет выступать в качестве ключа массива, а значение переменной будет значением в массиве по ключу.
    * В переменную $path кладем путь к файлу, который имя и папка, в которой он лежит, храниться в качестве значения в свойстве класса $this->path
	* Проверяем на наличие данного файла.
	* Если есть то включаем буферизацию вывода при помощи функции ob_start()
	* Вызываем файл, указанный в качестве значения в переменной $path
	* Далее получаем из буфера содержимое, кладем его в переменную $content и после этого чистим буфер. Все это делаем при помощи функции ob_get_clean().
	* Переменная $content со значением внутри передается в файл, по подключаемый с свойством $this->layout
	* Таким образом из контроллера получаем названии и ряд других переменных. 
	* Для понимание какой контроллер и какой экшен работает, необходимо посмотреть значение свойства класса $this->path. 
	* После начинаем отрисовку через свойство $this->layout. (работает как шаблон: header, footer и ряд других элементов, которые не меняются из страницы в страницу)
	* $content передается в шаблон и несет в себе значение, которое должно отображаться для пользователя, в зависимости от страницы
     */ 
	public function render($title, $vars = []) {
		extract($vars);
		$path = 'app/views/'.$this->path.'.php';
		if (file_exists($path)) {
			ob_start();
			require $path;
			$content = ob_get_clean();
			require 'app/views/layouts/'.$this->layout.'.php';
		}
	}
	
	/**
    * Функция redirect с модификатором доступа public, означает что данный метод доступен глобально.
    * Функция переадресации на страницу.
	* Получает в качестве входных параметров: 
    * $url - получаем в качестве входных параметров адрес странциы, на которую необходимо сделать переадресацию пользователя.
	* При помощи функции header осуществляем переадресацию
	* exit - завершаем функцию
     */ 
	public function redirect($url) {
		header('location: /'.$url);
		exit;
	}

	/**
    * Функция статическая errorCode с модификатором доступа public, означает что данный метод доступен глобально.
    * Функция переадресации на страницу ошибки при неверных действиях пользователя
	* Получает в качестве входных параметров: 
    * $code - получаем в качестве входных параметров номер ошибки.
	* При помощи функции http_response_code задаем код ответа
	* После чего кладем данный код в качестве значения в переменную $path
	* Проверяем существует ли файл, указанный в переменной $path
	* Если да, то подключаем данный файл
	* exit - завершаем функцию
     */ 
	public static function errorCode($code) {
		http_response_code($code);
		$path = 'app/views/errors/'.$code.'.php';
		if (file_exists($path)) {
			require $path;
		}
		exit;
	}

	/**
    * Функция message с модификатором доступа public, означает что данный метод доступен глобально.
    * Функция вывода сообщения на страницу
	* Получает в качестве входных параметров: 
    * $status - получаем в качестве входных параметров оглавление / название сообщения.
	* При помощи функции http_response_code задаем код ответа
	* После чего кладем данный код в качестве значения в переменную $path
	* Проверяем существует ли файл, указанный в переменной $path
	* Если да, то подключаем данный файл
	* exit - завершаем функцию
     */ 
	public function message($status, $message) {
		exit(json_encode(['status' => $status, 'message' => $message], JSON_UNESCAPED_UNICODE));
	}

	public function location($url) {
		exit(json_encode(['url' => $url]));
	}

}	